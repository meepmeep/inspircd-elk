input {

        file {
                path => "/tmp/statsserver_*.xml"
                mode => "read"
                file_completed_action => "delete"
                start_position => "beginning"
                sincedb_path => "/dev/null"
                exclude => "*.gz"
                type => "xml"
                tags => ["inspircdserver"]
                codec => multiline {
                        pattern => "<inspircdstats>"
                        negate => "true"
                        what => "previous"
                        max_lines => 1000000
                }
        }

        file {
                path => "/tmp/statsothers_*.xml"
                mode => "read"
                file_completed_action => "delete"
                start_position => "beginning"
                sincedb_path => "/dev/null"
                exclude => "*.gz"
                type => "xml"
                tags => ["inspircdothers"]
                codec => multiline {
                        pattern => "<inspircdstats>"
                        negate => "true"
                        what => "previous"
                        max_lines => 1000000
                }
        }


        file {
                path => "/tmp/statschan_*.xml"
                mode => "read"
                file_completed_action => "delete"
                start_position => "beginning"
                sincedb_path => "/dev/null"
                exclude => "*.gz"
                type => "xml"
                tags => ["inspircdchan"]
                codec => multiline {
                        pattern => "<inspircdstats>"
                        negate => "true"
                        what => "previous"
                        max_lines => 1000000
                }
        }

       file {
                path => "/tmp/statsuser_*.xml"
                mode => "read"
                file_completed_action => "delete"
                start_position => "beginning"
                sincedb_path => "/dev/null"
                exclude => "*.gz"
                type => "xml"
                tags => ["inspircduser"]
                codec => multiline {
                        pattern => "<inspircdstats>"
                        negate => "true"
                        what => "previous"
                        max_lines => 1000000
                }
        }

}

filter {

########## Log du module httpd_stats d'inspircd, info sur les serveurs  #############

        if "inspircdserver" in [tags] {

        grok {
                match => ["path",".*statsserver_(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY}_%{HOUR}%{MINUTE}%{SECOND}).xml" ]
        }

        date {
                locale => "en"
                match => ["timestamp","yyyy-MM-dd_HHmmss"]
                target => "timestamp"
        }


                xml{
                        source => "message"
                        store_xml => false
                        target => "root"

                        xpath => [
                           "/inspircdstats/serverlist/server/servername/text()", "ServerName",
                           "/inspircdstats/serverlist/server/usercount/text()", "UserCount"
                        ]
           }

                ruby {
                                code => "
                                        event.set('results', [event.get('ServerName'), event.get('UserCount')].transpose)
                "
        }
        split { field => "results" }

        mutate {
                add_field => {
                        "server" => "%{[results][0]}"
                        "nbuser" => "%{[results][1]}"
                }
        }

        mutate { convert => { "nbuser" => "integer" }}

        mutate { remove_field => [ "message"]}
        mutate { remove_field => [ "ServerName"]}
        mutate { remove_field => [ "UserCount"]}
        mutate { remove_field => [ "results"]}

        mutate { add_field => { "[@metadata][index]" => "inspircdserver-%{+YYYY-MM}" } }

	}


########## Log du module httpd_stats d'inspircd, infos sur les xlines et channels #############

        if "inspircdothers" in [tags] {
            xml{
                source => "message"
                store_xml => false
                target => "root"
                xpath => [
                    "/inspircdstats/general/channelcount/text()", "nbchan",
                    "/inspircdstats/general/usercount/text()", "nbuser",
                    "count(/inspircdstats/xlines/xline)", "nbxline"
                ]
            }

        split { field => "nbchan" }
        split { field => "nbxline" }
        split { field => "nbuser" }

        mutate {
               convert => { "nbchan" => "integer" }
               convert => { "nbxline" => "integer" }
               convert => { "nbuser" => "integer" }
        }
        mutate { remove_field => [ "message"]}
        mutate {                add_field => { "[@metadata][index]" => "inspircdothers-%{+YYYY-MM}" }}

        grok { match => ["path",".*statsothers_(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY}_%{HOUR}%{MINUTE}%{SECOND}).xml" ]}
        date { 
        	locale => "en"
        	match => ["timestamp","yyyy-MM-dd_HHmmss"]
        	target => "timestamp"
        }

	}

########## Log du module httpd_stats d'inspircd, info sur les chans  #############

        if "inspircdchan" in [tags] {

        grok { match => ["path",".*statschan_(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY}_%{HOUR}%{MINUTE}%{SECOND}).xml" ] }
        date {
                locale => "en"
                match => ["timestamp","yyyy-MM-dd_HHmmss"]
                target => "timestamp"
        }

                xml{
                        source => "message"
                        store_xml => false
                        target => "root"

                        xpath => [
                           "/inspircdstats/channellist/channel/channelname/text()", "ChannelName",
                           "/inspircdstats/channellist/channel/usercount/text()", "UserCount",
                           "/inspircdstats/channellist/channel/channelmodes/text()", "ChannelMode"
                        ]
           }

                ruby {
                                code => "
                                        event.set('results', [event.get('ChannelName'), event.get('ChannelMode'), event.get('UserCount')].transpose)
                "
        }
        split { field => "results" }

        mutate {
                add_field => {
                        "channel" => "%{[results][0]}"
                        "mode" => "%{[results][1]}"
                        "nbuser" => "%{[results][2]}"
                }
        }

        mutate { convert => { "nbuser" => "integer" }}

        mutate { remove_field => [ "message"]}
        mutate { remove_field => [ "ChannelName"]}
        mutate { remove_field => [ "UserCount"]}
        mutate { remove_field => [ "results"]}
        mutate { remove_field => [ "ChannelMode"]}

        # Check if chan is secret
        if "s" in [mode]{
                mutate { add_field => { "secret" => 1 } }
        } else {
                mutate { add_field => { "secret" => 0 } }
        }
        mutate { convert => { "secret" => "boolean" }}

        # Check if chan is registered
        if "r" in [mode]{
                mutate { add_field => { "registered" => 1 } }
        } else {
                mutate { add_field => { "registered" => 0 } }
        }
        mutate { convert => { "registered" => "boolean" }}

        mutate { add_field => { "[@metadata][index]" => "inspircdchan-%{+YYYY-MM}" } }

        }


########## Log du module httpd_stats d'inspircd, info sur les users  #############

        if "inspircduser" in [tags] {

        grok { match => ["path",".*statsuser_(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY}_%{HOUR}%{MINUTE}%{SECOND}).xml" ] }
        date {
                locale => "en"
                match => ["timestamp","yyyy-MM-dd_HHmmss"]
                target => "timestamp"
        }


        # https://discuss.elastic.co/t/xml-with-optionnal-fields-not-added-in-the-result-array-by-logstash/269891/2
   xml { source => "message" store_xml => true target => "[@metadata][theXML]" force_array => false remove_field => [ "message" ] }
    ruby {

       code => '
            users = event.get("[@metadata][theXML][userlist][user]")
            userArray = []
            users.each_index { |x|
               user = { "nick" => users[x]["nickname"], "ip" => users[x]["ipaddress"], "server" => users[x]["server"], "uuid" => users[x]["uuid"], "realhost" => users[x]["realhost"] }
        if users[x]["metadata"].nil?

        else
                metaArray = users[x]["metadata"]["meta"]
                if ! metaArray.is_a? Array
                    metaArray = [ metaArray ] # Force it to be an array
                end
                metaEntry = metaArray.find { |x| x["name"] == "ssl_cert" } || { "content" => "Null" }
                user["SecureConnection"] = metaEntry["content"]

                metaEntry = metaArray.find { |x| x["name"] == "cgiirc_gateway" } || { "content" => "Null" }
                user["webircgateway"] = metaEntry["content"]
        end
                userArray << user
            }
            event.set("users", userArray)
        '

    }
    split { field => "users" }
    # Move fields to top level
    ruby { code => 'event.get("users").each { |k, v| event.set(k, v) }; event.remove("users")' }

        # On remet au propre certaines valeurs (webircgw et secureconnection)
        # First : on verifie que les champs existent
        if ![webircgateway] { mutate { add_field => { "webircgateway" => "Null" }  } }
        if ![SecureConnection] { mutate { add_field => { "SecureConnection" => "Null" }  }  }

        # Second : on les transforme en true/false
        if [webircgateway] == "Null" { mutate { replace => { webircgateway => "0"} } } else { mutate { replace => { webircgateway => "1"} } }
        if [SecureConnection] == "Null" { mutate { add_field => { "usetls" => "0"} } } else { mutate { add_field => { "usetls" => "1"} } }

        if [ip] =~ /:/ { mutate { add_field => { "ip_type" => "ipv6" } } } else { mutate { add_field => { "ip_type" => "ipv4" } } }

        mutate { convert => { "usetls" => "boolean" } }
        mutate { convert => { "webircgateway" => "boolean" } }
        mutate { remove_field => ["SecureConnection"]}

        geoip {source => "ip" }
        mutate { add_field => { "[@metadata][index]" => "inspircduser-%{+YYYY-MM}" } }

        }

}

output {
	 elasticsearch{
       		hosts => ["http://localhost:9200"]
       		index => "%{[@metadata][index]}"
    	}
}

